{"version":3,"file":"translate.min.js","sources":["../../lib/core/engine.ts","../../lib/http/adapter.ts","../../lib/engines/deeplx.ts","../../lib/http/nodeHttpAdpater.ts","../../plugins/html/index.ts","../../plugins/vue/index.ts","../../lib/core/translate.ts","../../index.ts"],"sourcesContent":["\nimport HttpClient, { HtptClientResponseOption, HttpClientInstance } from '../http/adapter'\n\n/**\n * 默认翻译语言配置\n */\nexport interface TranslateDefaultConfiguraOption {\n  src?: string\n  target?: string\n  languageMap?: Array<localMapItemInfo>\n}\n\n/**\n * 翻译配置\n */\nexport interface TranslateConfigOption extends TranslateDefaultConfiguraOption {\n  text?: string\n  id: string | number\n}\n\n/**\n * 翻译响应信息\n */\nexport interface TranslateResponseOption {\n  alternatives: Array<string> | null\n  data: string\n  id: string | number\n  success: Boolean\n}\n\n/**\n * 翻译引擎接口类\n */\nexport interface ITranslateEngine {\n  translate(options: TranslateConfigOption | Array<TranslateConfigOption>): Promise<TranslateResponseOption> | Promise<Array<TranslateResponseOption>>;\n  singleTranslate(options: TranslateConfigOption): Promise<TranslateResponseOption>\n  branchTranslate(options: Array<TranslateConfigOption>): Promise<Array<TranslateResponseOption>>\n}\n\nexport class TranslateEngineInstance implements ITranslateEngine {\n  private _engine: ITranslateEngine;\n\n  constructor(enine: ITranslateEngine) {\n    this._engine = enine\n  }\n\n  singleTranslate(options: TranslateConfigOption): Promise<TranslateResponseOption> {\n    return this._engine.singleTranslate(options)\n  }\n  branchTranslate(options: TranslateConfigOption[]): Promise<TranslateResponseOption[]> {\n    return this._engine.branchTranslate(options)\n  }\n\n  translate(options: TranslateConfigOption | TranslateConfigOption[]): Promise<TranslateResponseOption> | Promise<TranslateResponseOption[]> {\n    return this._engine.translate(options)\n  }\n\n}\n\n/**\n * 语言词典库——单项词典信息\n */\nexport interface localMapItemInfo {\n  src: string\n  srcText: string\n  target: string\n  targetText: string\n  weight?: number\n}\n\nexport class TranslateLocalMapping {\n\n  private _mapList: Array<localMapItemInfo>\n  private _map: { [name: string]: Array<localMapItemInfo> };\n\n  private _currentKey: string = ''\n  private _currentMap: Array<localMapItemInfo> = []\n\n  constructor(list: Array<localMapItemInfo>) {\n    this._mapList = list\n    this._map = this.initMap()\n  }\n\n  private initMap() {\n    const map: { [name: string]: Array<localMapItemInfo> } = {};\n\n    this._mapList.forEach(item => {\n      const key = this.getMappingKey(item.src, item.target);\n      const info = map[key] || [];\n      info.push(item);\n      map[key] = info\n    })\n    return map\n  }\n\n  get currentMapKey() {\n    return this._currentKey\n  }\n\n\n  /**\n   * 获取映射key\n   * @param src 源语言\n   * @param target 目标语言\n   * @returns \n   */\n  getMappingKey(src: string, target: string) {\n    if (!src) {\n      throw new Error('The mapping items srcource language connot be emptry!')\n    }\n\n    if (!target) {\n      throw new Error('The mapping items target language connot be emptry!')\n    }\n\n    return `${src}_${target}`\n  }\n\n  changeKey(src: string, target: string) {\n    return this.buildTargetMappingInfo(this.getMappingKey(src, target))\n  }\n\n  /**\n   * 根据key构建本地映射表\n   * @param key 映射标识 需要符合`getMapingKey`返回格式\n   * @returns \n   */\n  buildTargetMappingInfo(key: string) {\n\n    const map = (this._map[key] || []).sort((v1, v2) => {\n      const width1 = v1.weight == undefined ? 0 : v1.weight\n      const width2 = v2.weight == undefined ? 0 : v2.weight\n      return width2 - width1;\n    })\n\n    this._currentKey = key\n    this._currentMap = map\n    return this;\n  }\n\n  /**\n   * 根据本地语言映射表标记原始文本\n   * @param localLanguageMapInfo \n   * @param info \n   * @returns \n   */\n  encode(info: TranslateConfigOption, map?: Array<localMapItemInfo>): TranslateConfigOption {\n\n    info = JSON.parse(JSON.stringify(info));\n    let text = info.text || '';\n\n    (map || this._currentMap).forEach((map, index) => {\n      text = text.replace(map.srcText, '${' + index + '}')\n    })\n\n    info.text = text;\n    return info;\n  }\n\n\n  /**\n   * 根据本地语言映射表解析翻译结果\n   * @param key 映射标识\n   * @param responseText 翻译响应结果文本\n   * @returns \n   */\n  decode(responseText: string, map?: Array<localMapItemInfo>): string {\n    (map || this._currentMap).forEach((item, index) => {\n      responseText = responseText.replace('${' + index + '}', item.targetText)\n    })\n    return responseText;\n  }\n\n\n\n}\n\n","\nimport NodeHttpAdapter from './nodeHttpAdpater'\n\n/**\n * 请求方法\n */\nexport enum HttpClientRequestMethod {\n  GET = 'GET',\n  POST = 'POST'\n}\n\nexport interface HttpClientRequestDefaultOption {\n  timeout?: number\n}\n\n/**\n * 请求体配置属性\n */\nexport interface HttpClientRequestOption extends HttpClientRequestDefaultOption {\n  url?: string\n  method?: HttpClientRequestMethod | string\n  headers?: { [name: string]: string }\n  params?: any\n  data?: any\n}\n\n/**\n * 错误响应属性\n */\nexport interface HtptClientResponseError {\n  message?: string\n  code?: number | string\n}\n\n/**\n * 正常响应属性\n */\nexport interface HtptClientResponseOption<T> extends HtptClientResponseError {\n  data: T | null\n}\n\nexport interface IHttpAdapter {\n  send<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n}\n\n/**\n * 请求客户端接口\n */\ninterface IHttpClient {\n  get<T>(url: string, params?: any, options?: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n  post<T>(url: string, data?: any, options?: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n  request<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n\n}\n\nexport class HttpClientInstance implements IHttpClient {\n  private defaultOption: HttpClientRequestOption\n\n  constructor(options: HttpClientRequestOption) {\n    this.defaultOption = options\n  }\n\n  get<T>(url: string, params?: any, options?: HttpClientRequestOption | undefined): Promise<HtptClientResponseOption<T>> {\n    return this.request<T>(Object.assign(this.defaultOption, options, { url, method: HttpClientRequestMethod.GET, params }))\n  }\n\n  post<T>(url: string, data?: any, options?: HttpClientRequestOption | undefined): Promise<HtptClientResponseOption<T>> {\n    return this.request<T>(Object.assign(this.defaultOption, options, { url, method: HttpClientRequestMethod.POST, data }))\n  }\n\n  request<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>> {\n\n    const adapter = new NodeHttpAdapter();\n    return adapter.send<T>(Object.assign(this.defaultOption, options))\n  }\n}\n\nexport class HttpClient {\n  static create(options: HttpClientRequestDefaultOption): HttpClientInstance {\n    return new HttpClientInstance(options)\n  }\n}\n\nexport default HttpClient","\nimport { ITranslateEngine, localMapItemInfo, TranslateConfigOption, TranslateDefaultConfiguraOption, TranslateLocalMapping, TranslateResponseOption } from \"../core/engine\";\n\nimport { HttpClient, HttpClientInstance } from \"../http/adapter\";\n\nexport enum DeeplxLanguage {\n  ZH = 'ZH',\n  EN = 'EN'\n}\n\nexport interface DeeplxDefaultConfiguraOption extends TranslateDefaultConfiguraOption {\n  url: string\n  authorization: string\n  timeout?: number\n}\n\nexport class DeeplxTranslateEngine implements ITranslateEngine {\n\n  private src;\n  private target;\n  private languageMap;\n\n  private url;\n  private authorization;\n  private http: HttpClientInstance;\n\n  constructor(options: DeeplxDefaultConfiguraOption) {\n\n    if (!options.url) {\n      throw new Error('The deeplx translation address cannot be emptry')\n    }\n\n    if (!options.authorization) {\n      throw new Error('The deeplx request token cannot be emptry')\n    }\n\n\n    this.src = options.src || DeeplxLanguage.ZH\n    this.target = options.target || DeeplxLanguage.EN\n    this.languageMap = options.languageMap || {}\n\n    this.url = options.url;\n    this.authorization = options.authorization;\n    this.http = HttpClient.create({\n      timeout: options.timeout\n    })\n  }\n\n\n  /**\n   * 发送翻译请求\n   * @param text 需要翻译的文本\n   * @param src 源语言\n   * @param target 目标语言\n   * @returns \n   */\n  private requestTranslate(text: string, src: DeeplxLanguage | string, target: DeeplxLanguage | string) {\n\n    if (!src) {\n      throw new Error('The source language cannot be emptry')\n    }\n\n    if (!target) {\n      throw new Error('The target language cannot be emptry')\n    }\n\n    return this.http.post<TranslateResponseOption>(this.url,\n      {\n        \"text\": text,\n        \"source_lang\": src || this.src,\n        \"target_lang\": target || this.target\n      }, {\n      headers: {\n        'Authorization': this.authorization\n      }\n    })\n  }\n\n\n\n  /**\n   * 单个翻译\n   * @param options \n   */\n  singleTranslate(options: TranslateConfigOption): Promise<TranslateResponseOption> {\n    return new Promise((resolve, reject) => {\n\n      //是否是需要忽略翻译的文本\n      const ignore = options.text == null || options.text == undefined || options.text.length <= 0 || !Number.isNaN(Number(options.text))\n      if (ignore) {\n        return resolve({\n          alternatives: null,\n          data: options.text || '',\n          id: options.id,\n          success: false\n        })\n      }\n\n      const localMapControl = new TranslateLocalMapping((options.languageMap || this.languageMap || []) as Array<localMapItemInfo>)\n      const _options = localMapControl.changeKey(options.src || this.src, options.target || this.target).encode(options)\n\n      this.requestTranslate(_options.text || '', _options.src || '', _options.target || '').then((res) => {\n        resolve(res.code == 200 && res.data?.data ? {\n          alternatives: (res.data || {}).alternatives || null,\n          data: localMapControl.decode(res.data?.data || ''),\n          id: options.id || '',\n          success: true\n        } : {\n          alternatives: null,\n          data: options.text || '',\n          id: options.id || '',\n          success: false\n        }\n        )\n\n      })\n    })\n  }\n\n  /**\n   * 批量翻译\n   * @param options \n   */\n  branchTranslate(options: Array<TranslateConfigOption>): Promise<Array<TranslateResponseOption>> {\n\n    return new Promise((resolve, reject) => {\n\n      const requestList: Array<TranslateResponseOption> = []\n\n      Promise.all(options.map(info => this.singleTranslate(info))).then((res) => {\n        requestList.push(...res)\n      }).finally(() => {\n        resolve(requestList)\n      })\n\n    })\n\n  }\n\n\n  /**\n   * \n   * @param options Translation Configura Option\n   * @returns If options dont instance of array,or options length is one return `Pormise<TranslateResponseOption>`,\n   * otherwise return `Promise<Array<TranslateResponseOption>>` type\n   * \n   */\n  translate(options: TranslateConfigOption | Array<TranslateConfigOption>): Promise<TranslateResponseOption> | Promise<Array<TranslateResponseOption>> {\n    return !(options instanceof Array) ? this.singleTranslate(options) : options.length == 1 ? this.singleTranslate(options[0]) : this.branchTranslate(options)\n  }\n\n}\n","import * as http from 'http'\nimport { Buffer } from 'buffer';\nimport { HtptClientResponseOption, HttpClientRequestMethod, HttpClientRequestOption, IHttpAdapter } from './adapter';\n\nexport default class NodeHttpAdapter implements IHttpAdapter {\n\n  send<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>> {\n    return new Promise<HtptClientResponseOption<T>>((resolve, reject) => {\n\n      if (!options.url) {\n        return reject({\n          mesage: 'The request url is empty'\n        })\n      }\n\n      if (!options.method) {\n        return reject({\n          mesage: 'The request method is empty'\n        })\n      }\n\n      const urlInfo = new URL(URL.canParse(options.url) ? options.url : window.location.origin + options.url);\n\n      const _options = Object.assign(options, {\n        hostname: urlInfo.hostname || window.location.hostname,\n        port: urlInfo.port || 80,\n        path: urlInfo.pathname + urlInfo.search || '',\n      })\n\n      delete _options.url;\n\n      //创建请求示例\n      const _h = http.request(\n        _options,\n        (res: any) => {\n          //设置响应编码\n          res.setEncoding('utf8');\n\n          //监听数据响应\n          let _data: any;\n          res.on('data', (chunk: any) => {\n\n            if (!_data) return _data = chunk;\n            _data instanceof Buffer ? (_data.includes(chunk)) : (_data += chunk)\n\n          })\n\n          //监听响应结束\n          res.on('end', () => {\n\n            if ((res.headers['content-type'] || '').indexOf('application/json') >= 0) _data = JSON.parse(_data.toString() || '')\n\n            resolve({\n              code: res.statusCode || 500,\n              message: res.statusMessage,\n              data: _data\n            })\n          })\n\n\n        }\n      );\n\n      //错误拦截\n      _h.on('error', (e: any) => {\n        reject({\n          message: e.message\n        })\n      })\n\n      //添加内容到body\n      if (options.method == HttpClientRequestMethod.POST) {\n        _h.write(JSON.stringify(options.data))\n      }\n\n      //设置超时时间\n      if (!Number.isInteger(options.timeout) || Number(options.timeout) > 0) {\n        _h.setTimeout(options.timeout || 60000, () => {\n          reject({\n            message: 'time out'\n          })\n        })\n      }\n\n\n      //结束写入\n      _h.end();\n\n    });\n  }\n\n}","import { localMapItemInfo, TranslateConfigOption, TranslateDefaultConfiguraOption, TranslateEngineInstance } from \"../../lib/core/engine\";\nimport { PluginDefaultConfiguraOption } from \"../index\";\n\nexport interface HtmlPluginDefaultConfigOption extends PluginDefaultConfiguraOption {\n  el: string\n}\n\nexport class HtmlPlugin {\n  private _engine: TranslateEngineInstance;\n  private _el: HTMLElement\n\n  private _options: HtmlPluginDefaultConfigOption\n\n  constructor(options: HtmlPluginDefaultConfigOption) {\n    this._options = options\n    this._engine = new TranslateEngineInstance(options.engine)\n\n    this._el = this.el\n    this.watchDom()\n  }\n\n  get engine() {\n    return this._engine\n  }\n\n  get options() {\n    return this._options\n  }\n\n  get el() {\n    return (document.querySelector(this._options.el) || document.querySelector('body')) as HTMLElement\n  }\n\n  watchDom() {\n    if (this._el != document.querySelector('body')) {\n      var observer = new MutationObserver(() => {\n        this._el = this.el\n      });\n      observer.observe(document.querySelector('body') as Node, {\n        childList: true\n      });\n    }\n  }\n\n  translate(options: TranslateDefaultConfiguraOption) {\n\n    const textNodes: Array<any> = [];\n\n    this._el.querySelectorAll('*').forEach(node => {\n      node.childNodes.forEach(item => {\n        if (item.nodeName == '#text' && node.getAttribute('not-translate') != 'not-translate') {\n          textNodes.push(item)\n        }\n      })\n    });\n\n    const requestList: Array<TranslateConfigOption> = []\n\n    textNodes.map((node, i) => {\n      requestList.push({\n        id: `${i}`,\n        text: node.data,\n        src: options.src || '',\n        target: options.target || '',\n        languageMap: options.languageMap\n      })\n    })\n\n    this._engine.branchTranslate(requestList).then(res => {\n      res.forEach(info => {\n        textNodes[Number(info.id)].textContent = info.data\n      })\n    })\n  }\n}\n\nexport default {\n  create(options: HtmlPluginDefaultConfigOption) {\n    const plugin = new HtmlPlugin(options)\n\n    return plugin\n  }\n}","import { TranslateDefaultConfiguraOption, TranslateEngineInstance } from \"../../lib/core/engine\";\nimport TranslateHTMLPugin, { HtmlPlugin, HtmlPluginDefaultConfigOption } from \"../html/index\"\n\nexport interface VuePluginDefaultConfigOption extends HtmlPluginDefaultConfigOption {\n  global?: boolean\n}\n\nexport class VuePlugin {\n\n  private _plugin: HtmlPlugin\n\n  constructor(options: VuePluginDefaultConfigOption) {\n    this._plugin = TranslateHTMLPugin.create(options)\n  }\n\n  translate(options: TranslateDefaultConfiguraOption) {\n    this._plugin.translate(options)\n  }\n}\n\nexport function getDirectiveOptions() {\n\n  function setNotTranslateKey(el: HTMLElement) {\n    el.setAttribute('not-translate', 'not-translate')\n    el.querySelectorAll('*').forEach(node => {\n      if (node.getAttribute('not-translate') != 'not-translate') {\n        node.setAttribute('not-translate', 'not-translate')\n      }\n    })\n  }\n\n  return {\n    //v 2.0\n    bind(el: HTMLElement) {\n      setNotTranslateKey(el)\n    },\n    //v2.0\n    componentUpdated(el: HTMLElement) {\n      setNotTranslateKey(el)\n    }\n  }\n}\n\nexport default {\n  install(app: any, options: VuePluginDefaultConfigOption) {\n    const _p = this.create(options);\n\n    if (options.global != false) {\n      if (Number(app.version.split('.')[0]) < 3) {\n        app.prototype.$t = _p\n      } else {\n        app.config.globalProperties.$t = _p\n      }\n    }\n\n    app.directive('not-translate', getDirectiveOptions())\n  },\n  create(options: VuePluginDefaultConfigOption) {\n    return new VuePlugin(options)\n  }\n}","// this module should only have a default export\nimport { DeeplxTranslateEngine, DeeplxLanguage } from '../engines/index'\nimport { TranslateEngineInstance } from './engine'\n\nimport TranslateVuePlugin from '../../plugins/vue/index'\nimport TranslateHTMLPlugin from '../../plugins/html/index'\n\nexport default {\n  DeeplxTranslateEngine,\n  DeeplxLanguage,\n  TranslateVuePlugin,\n  TranslateHTMLPlugin,\n  TranslateEngineInstance\n}","\n// This module is intended to unwrap Axios default export as named.\n\nimport Translate from './lib/core/translate'\n\nconst { DeeplxTranslateEngine, DeeplxLanguage, TranslateVuePlugin, TranslateEngineInstance, TranslateHTMLPlugin } = Translate\n\nexport {\n  Translate as default,\n  DeeplxTranslateEngine,\n  DeeplxLanguage,\n  TranslateVuePlugin,\n  TranslateEngineInstance,\n  TranslateHTMLPlugin\n}"],"names":["TranslateEngineInstance","constructor","enine","this","_engine","singleTranslate","options","branchTranslate","translate","TranslateLocalMapping","list","_currentKey","_currentMap","_mapList","_map","initMap","map","forEach","item","key","getMappingKey","src","target","info","push","currentMapKey","Error","changeKey","buildTargetMappingInfo","sort","v1","v2","width1","undefined","weight","encode","text","JSON","parse","stringify","index","replace","srcText","decode","responseText","targetText","HttpClientRequestMethod","DeeplxLanguage","NodeHttpAdapter","send","Promise","resolve","reject","url","mesage","method","urlInfo","URL","canParse","window","location","origin","_options","Object","assign","hostname","port","path","pathname","search","_h","http.request","res","_data","setEncoding","on","chunk","Buffer","includes","headers","indexOf","toString","code","statusCode","message","statusMessage","data","e","POST","write","Number","isInteger","timeout","setTimeout","end","HttpClientInstance","defaultOption","get","params","request","GET","post","HttpClient","create","HtmlPlugin","engine","_el","el","watchDom","document","querySelector","MutationObserver","observe","childList","textNodes","querySelectorAll","node","childNodes","nodeName","getAttribute","requestList","i","id","languageMap","then","textContent","TranslateHTMLPlugin$1","VuePlugin","_plugin","TranslateHTMLPugin","TranslateVuePlugin$1","install","app","_p","global","version","split","prototype","$t","config","globalProperties","directive","setNotTranslateKey","setAttribute","bind","componentUpdated","getDirectiveOptions","Translate","authorization","ZH","EN","http","requestTranslate","source_lang","target_lang","Authorization","length","isNaN","alternatives","success","localMapControl","_a","_b","all","finally","Array","TranslateVuePlugin","TranslateHTMLPlugin","DeeplxTranslateEngine"],"mappings":"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"}