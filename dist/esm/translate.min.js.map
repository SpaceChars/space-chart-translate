{"version":3,"file":"translate.min.js","sources":["../../lib/http/adapter.ts","../../lib/engines/deeplx.ts","../../lib/http/nodeHttpAdpater.ts","../../lib/core/engine.ts","../../plugins/vue/index.ts","../../lib/core/translate.ts","../../index.ts"],"sourcesContent":["import XHRAdapter from './xhrAdapter';\nimport NodeHttpAdapter from './nodeHttpAdpater'\n\n/**\n * 请求方法\n */\nexport enum HttpClientRequestMethod {\n  GET = 'GET',\n  POST = 'POST'\n}\n\nexport interface HttpClientRequestDefaultOption {\n  timeout?: number\n}\n\n/**\n * 请求体配置属性\n */\nexport interface HttpClientRequestOption extends HttpClientRequestDefaultOption {\n  url?: string\n  method?: HttpClientRequestMethod | string\n  headers?: { [name: string]: string }\n  params?: any\n  data?: any\n}\n\n/**\n * 错误响应属性\n */\nexport interface HtptClientResponseError {\n  message?: string\n  code?: number | string\n}\n\n/**\n * 正常响应属性\n */\nexport interface HtptClientResponseOption<T> extends HtptClientResponseError {\n  data: T | null\n}\n\nexport interface IHttpAdapter {\n  send<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n}\n\n/**\n * 请求客户端接口\n */\ninterface IHttpClient {\n  get<T>(url: string, params?: any, options?: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n  post<T>(url: string, data?: any, options?: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n  request<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n\n}\n\nexport class HttpClientInstance implements IHttpClient {\n  private defaultOption: HttpClientRequestOption\n\n  constructor(options: HttpClientRequestOption) {\n    this.defaultOption = options\n  }\n\n  get<T>(url: string, params?: any, options?: HttpClientRequestOption | undefined): Promise<HtptClientResponseOption<T>> {\n    return this.request<T>(Object.assign(this.defaultOption, options, { url, method: HttpClientRequestMethod.GET, params }))\n  }\n\n  post<T>(url: string, data?: any, options?: HttpClientRequestOption | undefined): Promise<HtptClientResponseOption<T>> {\n    return this.request<T>(Object.assign(this.defaultOption, options, { url, method: HttpClientRequestMethod.POST, data }))\n  }\n\n  request<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>> {\n    // const adapter = typeof XMLHttpRequest !== 'undefined' ? new XHRAdapter() : new NodeHttpAdapter();\n    const adapter = new NodeHttpAdapter();\n    return adapter.send<T>(Object.assign(this.defaultOption, options))\n  }\n}\n\nexport class HttpClient {\n  static create(options: HttpClientRequestDefaultOption): HttpClientInstance {\n    return new HttpClientInstance(options)\n  }\n}\n\nexport default HttpClient","import { ITranslateEngine, LanguageMapItemInfo, TranslateConfigOption, TranslateDefaultConfiguraOption, TranslateResponseOption } from \"../core/engine\";\nimport { HttpClient, HttpClientInstance } from \"../http/adapter\";\n\nexport enum DeeplxLanguage {\n  ZH = 'ZH',\n  EN = 'EN'\n}\n\nexport interface DeeplxDefaultConfiguraOption extends TranslateDefaultConfiguraOption {\n  url: string\n  authorization: string\n  timeout?: number\n}\n\nexport class DeeplxTranslateEngine implements ITranslateEngine {\n\n  private src;\n  private target;\n  private languageMap;\n\n  private url;\n  private authorization;\n  private http: HttpClientInstance;\n\n  constructor(options: DeeplxDefaultConfiguraOption) {\n\n    if (!options.url) {\n      throw new Error('The deeplx translation address cannot be emptry')\n    }\n\n    if (!options.authorization) {\n      throw new Error('The deeplx request token cannot be emptry')\n    }\n\n    if (!options.src) {\n      throw new Error('The source language cannot be emptry')\n    }\n\n    if (!options.target) {\n      throw new Error('The target language cannot be emptry')\n    }\n\n    this.src = options.src || DeeplxLanguage.ZH\n    this.target = options.target || DeeplxLanguage.EN\n    this.languageMap = options.languageMap || {}\n\n    this.url = options.url;\n    this.authorization = options.authorization;\n    this.http = HttpClient.create({\n      timeout: options.timeout\n    })\n  }\n\n  /**\n   * 根据配置信息获取本地语言映射表映射标识\n   * @param options 配置信息\n   * @returns \n   */\n  private getLocalTranslateLanguageMapKeyByOption(options: TranslateConfigOption): string {\n    return `${options.src || this.src}-${options.target || this.target}`;\n  }\n\n  /**\n   * 根据key获取本地语言映射表信息\n   * @param key 映射标识 格式：[srcource language]-[target language]\n   * @returns \n   */\n  private getLocalTranslateLanguageMapInfoByKey(key: string): Array<LanguageMapItemInfo> {\n    return (this.languageMap[key] || []).sort((v1, v2) => {\n      const width1 = v1.weight == undefined ? 0 : v1.weight\n      const width2 = v2.weight == undefined ? 0 : v2.weight\n      return width2 - width1;\n    })\n  }\n\n  /**\n   * 发送翻译请求\n   * @param text 需要翻译的文本\n   * @param src 源语言\n   * @param target 目标语言\n   * @returns \n   */\n  private requestTranslate(text: string, src: DeeplxLanguage | string, target: DeeplxLanguage | string) {\n    return this.http.post<TranslateResponseOption>(this.url,\n      {\n        \"text\": text,\n        \"source_lang\": src || this.src,\n        \"target_lang\": target || this.target\n      }, {\n      headers: {\n        'Authorization': this.authorization\n      }\n    })\n  }\n\n  /**\n   * 根据本地语言映射表标记原始文本\n   * @param localLanguageMapInfo \n   * @param info \n   * @returns \n   */\n  encodeTranslateMapping(localLanguageMapInfo: Array<LanguageMapItemInfo>, info: TranslateConfigOption): TranslateConfigOption {\n\n    info = JSON.parse(JSON.stringify(info));\n    let text = info.text || '';\n\n    localLanguageMapInfo.forEach((map, index) => {\n      text = text.replace(map.src, '${' + index + '}')\n    })\n\n    info.text = text;\n    return info;\n  }\n\n\n  /**\n   * 根据本地语言映射表解析翻译结果\n   * @param key 映射标识\n   * @param responseText 翻译响应结果文本\n   * @returns \n   */\n  decodeTranslateMapping(localLanguageMapInfo: Array<LanguageMapItemInfo>, responseText: string): string {\n    localLanguageMapInfo.forEach((item, index) => {\n      responseText = responseText.replace('${' + index + '}', item.target)\n    })\n    return responseText;\n  }\n\n  /**\n   * 单个翻译\n   * @param options \n   */\n  singleTranslate(options: TranslateConfigOption): Promise<TranslateResponseOption> {\n    return new Promise((resolve, reject) => {\n\n      const targetLanguageMapInfo = this.getLocalTranslateLanguageMapInfoByKey(this.getLocalTranslateLanguageMapKeyByOption(options))\n\n      const _options = this.encodeTranslateMapping(targetLanguageMapInfo, options)\n\n      this.requestTranslate(_options.text || '', _options.src, _options.target).then((res) => {\n        resolve(res.code == 200 ? {\n          alternatives: (res.data || {}).alternatives || null,\n          data: this.decodeTranslateMapping(targetLanguageMapInfo, res.data?.data || ''),\n          id: options.id || '',\n          success: true\n        } : {\n          alternatives: null,\n          data: options.text || '',\n          id: options.id || '',\n          success: false\n        }\n        )\n\n      })\n    })\n  }\n\n  /**\n   * 批量翻译\n   * @param options \n   */\n  branchTranslate(options: Array<TranslateConfigOption>): Promise<Array<TranslateResponseOption>> {\n\n    return new Promise((resolve, reject) => {\n\n      // 按源语言和目标语言进行分组\n      const translateGroup: { [name: string]: Array<TranslateConfigOption> } = {};\n\n      options.forEach((option, index) => {\n\n        const key = this.getLocalTranslateLanguageMapKeyByOption(option)\n\n        const info: Array<TranslateConfigOption> = translateGroup[key] || [];\n        info.push(option)\n\n        translateGroup[key] = info;\n      })\n\n      const requestList: Array<TranslateResponseOption> = []\n\n      //By language group Translate\n      Promise.all(Object.keys(translateGroup).map(key => {\n\n        const language = key.split('-');\n\n        const targetLanguageMapInfo = this.getLocalTranslateLanguageMapInfoByKey(key)\n\n        const encodeTranslateInfo = translateGroup[key].map(item => this.encodeTranslateMapping(targetLanguageMapInfo, item))\n\n        // let translateSrcText = JSON.stringify(encodeTranslateInfo.map(item => item.text));\n        let translateSrcText = encodeTranslateInfo.map(item => item.text).join(',');\n\n        return this.requestTranslate(translateSrcText, language[0], language[1]).then((res) => {\n\n          //处理返回的字符串\n          let _resText = res.data?.data || '';\n          // _resText = (_resText.match(/.*]/g) || [])[0] || '[]';\n          // _resText = _resText.replaceAll('/\\\"', '\\\\\\\"');\n          // _resText = _resText.replaceAll('=\\\"', '=\\\\\\\"');\n\n          // const data = JSON.parse(_resText)\n          const data = _resText.split(',')\n          if (res.code == 200 && data.length > 1) {\n\n            data.forEach((v: string, i: number) => {\n              const info = encodeTranslateInfo[i];\n              requestList.push({\n                alternatives: (res.data || {}).alternatives || null,\n                data: this.decodeTranslateMapping(targetLanguageMapInfo, v),\n                id: info.id,\n                success: true\n              })\n            })\n          } else {\n            translateGroup[key].forEach(info => {\n              requestList.push({\n                alternatives: null,\n                data: info.text || '',\n                id: info.id,\n                success: false\n              })\n            })\n\n          }\n        })\n      })).finally(() => {\n        resolve(requestList)\n      })\n\n\n    })\n\n  }\n\n\n  /**\n   * \n   * @param options Translation Configura Option\n   * @returns If options dont instance of array,or options length is one return `Pormise<TranslateResponseOption>`,\n   * otherwise return `Promise<Array<TranslateResponseOption>>` type\n   * \n   */\n  translate(options: TranslateConfigOption | Array<TranslateConfigOption>): Promise<TranslateResponseOption> | Promise<Array<TranslateResponseOption>> {\n    return !(options instanceof Array) ? this.singleTranslate(options) : options.length == 1 ? this.singleTranslate(options[0]) : this.branchTranslate(options)\n  }\n\n}\n\nexport default {}","import * as http from 'http'\nimport { Buffer } from 'buffer';\nimport { HtptClientResponseOption, HttpClientRequestMethod, HttpClientRequestOption, IHttpAdapter } from './adapter';\n\nexport default class NodeHttpAdapter implements IHttpAdapter {\n\n  send<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>> {\n    return new Promise<HtptClientResponseOption<T>>((resolve, reject) => {\n\n      if (!options.url) {\n        return reject({\n          mesage: 'The request url is empty'\n        })\n      }\n\n      if (!options.method) {\n        return reject({\n          mesage: 'The request method is empty'\n        })\n      }\n\n      const urlInfo = new URL(URL.canParse(options.url) ? options.url : window.location.origin + options.url);\n\n      const _options = Object.assign(options, {\n        hostname: urlInfo.hostname || window.location.hostname,\n        port: urlInfo.port || 80,\n        path: urlInfo.pathname + urlInfo.search || '',\n      })\n\n      delete _options.url;\n\n      //创建请求示例\n      const _h = http.request(\n        _options,\n        (res: any) => {\n          //设置响应编码\n          res.setEncoding('utf8');\n\n          //监听数据响应\n          let _data: any;\n          res.on('data', (chunk: any) => {\n\n            if (!_data) return _data = chunk;\n            _data instanceof Buffer ? (_data.includes(chunk)) : (_data += chunk)\n\n          })\n\n          //监听响应结束\n          res.on('end', () => {\n\n            if ((res.headers['content-type'] || '').indexOf('application/json') >= 0) _data = JSON.parse(_data.toString() || '')\n\n            resolve({\n              code: res.statusCode || 500,\n              message: res.statusMessage,\n              data: _data\n            })\n          })\n\n\n        }\n      );\n\n      //错误拦截\n      _h.on('error', (e: any) => {\n        reject({\n          message: e.message\n        })\n      })\n\n      //添加内容到body\n      if (options.method == HttpClientRequestMethod.POST) {\n        _h.write(JSON.stringify(options.data))\n      }\n\n      //设置超时时间\n      if (!Number.isInteger(options.timeout) || Number(options.timeout) > 0) {\n        _h.setTimeout(options.timeout || 60000, () => {\n          reject({\n            message: 'time out'\n          })\n        })\n      }\n\n\n      //结束写入\n      _h.end();\n\n    });\n  }\n\n}","\nimport HttpClient, { HtptClientResponseOption, HttpClientInstance } from '../http/adapter'\n\n/**\n * 语言词典库——单项词典信息\n */\nexport interface LanguageMapItemInfo {\n  src: string\n  target: string\n  weight?: number\n}\n\n/**\n * 默认翻译语言配置\n */\nexport interface TranslateDefaultConfiguraOption {\n  src: string\n  target: string\n  languageMap?: { [name: string]: Array<LanguageMapItemInfo> }\n}\n\n/**\n * 翻译配置\n */\nexport interface TranslateConfigOption extends TranslateDefaultConfiguraOption {\n  text?: string\n  id: string | number\n}\n\n/**\n * 翻译响应信息\n */\nexport interface TranslateResponseOption {\n  alternatives: Array<string> | null\n  data: string\n  id: string | number\n  success: Boolean\n}\n\n/**\n * 翻译引擎接口类\n */\nexport interface ITranslateEngine {\n  translate(options: TranslateConfigOption | Array<TranslateConfigOption>): Promise<TranslateResponseOption> | Promise<Array<TranslateResponseOption>>;\n  singleTranslate(options: TranslateConfigOption): Promise<TranslateResponseOption>\n  branchTranslate(options: Array<TranslateConfigOption>): Promise<Array<TranslateResponseOption>>\n}\n\nexport class TranslateEngineInstance implements ITranslateEngine {\n  private _engine: ITranslateEngine;\n\n  constructor(enine: ITranslateEngine) {\n    this._engine = enine\n  }\n\n  singleTranslate(options: TranslateConfigOption): Promise<TranslateResponseOption> {\n    return this._engine.singleTranslate(options)\n  }\n  \n  branchTranslate(options: TranslateConfigOption[]): Promise<TranslateResponseOption[]> {\n    return this._engine.branchTranslate(options)\n  }\n\n  translate(options: TranslateConfigOption | TranslateConfigOption[]): Promise<TranslateResponseOption> | Promise<TranslateResponseOption[]> {\n    return this._engine.translate(options)\n  }\n\n}","import { LanguageMapItemInfo, TranslateConfigOption, TranslateEngineInstance } from '../../lib/core/engine';\nimport { PluginDefaultConfiguraOption } from '../index';\n\n/**\n * translation queue item options\n */\ninterface TranslationQueueItemOption {\n  text: string\n  src?: string\n  target?: string\n  languageMap?: { [name: string]: Array<LanguageMapItemInfo> },\n  translate: boolean\n  request?: boolean\n  el: HTMLElement\n}\n\ninterface TranslateRequestQueueItemOption {\n  src: TranslationQueueItemOption\n  encodeText: string\n}\n\n/**\n * translation queue\n */\n\nclass TranslationQueue {\n  private _queue: Array<TranslationQueueItemOption> = [];\n  private _engine: TranslateEngineInstance;\n  private _timer: NodeJS.Timeout | null = null;\n\n  constructor(engine: TranslateEngineInstance) {\n    this._engine = engine\n  }\n\n  /**\n   * added translation queue item\n   * @param options one or more queue options\n   * @returns \n   */\n  add(...options: Array<TranslationQueueItemOption>) {\n    this._queue.push(...options)\n\n    if (this._timer != null) clearTimeout(this._timer);\n    this._timer = setTimeout(() => {\n      this.request()\n    }, 200)\n  }\n\n  request() {\n\n    const requestList: Array<TranslateConfigOption> = []\n\n    const requestQueue: Array<TranslateRequestQueueItemOption> = this._queue.map((info, i1) => {\n\n      info.request = true;\n\n      let _t = info.text;\n\n      [...info.text.matchAll(/>(.*?)</g)].reduce((addIndex, rex: any, i2) => {\n\n        const id = `{${i1}_${i2}}`,\n\n          startIndex = addIndex + (rex.index || 0) + 1,\n          endIndex = rex[1].length + startIndex;\n\n        _t = _t.substring(0, startIndex) + id + _t.substring(endIndex, _t.length)\n\n        requestList.push({\n          id: `${i1}_${i2}`,\n          text: rex[1],\n          src: info.src || '',\n          target: info.target || '',\n          languageMap: info.languageMap\n        })\n\n        return addIndex - (rex[1].length - id.length)\n      }, 0)\n\n      return {\n        src: info,\n        encodeText: _t,\n      }\n\n    })\n\n    this._engine.branchTranslate(requestList).then(res => {\n\n      console.log('----res', res);\n\n\n      res.forEach(info => {\n        const ids = (info.id as string).split('_');\n        requestQueue[Number(ids[0])].encodeText = requestQueue[Number(ids[0])].encodeText.replace(`{${info.id}}`, info.data)\n      })\n\n      requestQueue.forEach(info => {\n        info.src.el.innerHTML = info.encodeText\n      })\n\n\n      // this._queue.forEach((info, index) => {\n      //   info.el.innerHTML = (res.find(item => item.id == index) || {}).data || ''\n      // })\n    })\n  }\n\n  /**\n   * By node element remove queue items \n   * Only remove queues with element  `request` option set to false or undefined\n   * @param el node element\n   */\n  remove(el: HTMLElement | Node) {\n    this._queue = (this._queue || []).filter(info => info.el == el && !info.request)\n  }\n}\n\nlet queue: TranslationQueue;\n\nclass TranslateVuePlugin {\n\n  private _engine: TranslateEngineInstance\n\n  constructor(options: PluginDefaultConfiguraOption) {\n    if (!options.engine) {\n      throw new Error('The translation engine connot be emptry')\n    }\n\n    this._engine = new TranslateEngineInstance(options.engine);\n  }\n\n  initQueue() {\n    queue = new TranslationQueue(this._engine)\n  }\n\n  /**\n   * registe `v-nottranslate` directive\n   * @returns vue directive options\n   */\n  regsiteNotTranslateDirective() {\n    return {\n\n      /**\n       * v2.0 指令绑定到元素时\n       * @param el \n       * @param binding \n       * @param vnode \n       * @param prevVnode \n       */\n      bind(el: HTMLElement, binding: any, vnode: any, prevVnode: any) {\n        el.setAttribute('not-translate', 'true')\n        queue.add({\n          el,\n          text: el.outerHTML,\n          translate: false\n        })\n      },\n      /**\n       * v2.0 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前\n       * @param el \n       * @param binding \n       * @param vnode \n       * @param prevVnode \n       */\n      update(el: HTMLElement, binding: any, vnode: any, prevVnode: any) {\n        if (!el.getAttribute('not-translate')) {\n          el.setAttribute('not-translate', 'true')\n          queue.add({\n            el,\n            text: el.outerHTML,\n            translate: false,\n          })\n        }\n      },\n      /**\n       * v3.0 在绑定元素的父组,及他自己的所有子节点都挂载完成后调用\n       * @param el \n       * @param binding \n       * @param vnode \n       * @param prevVnode \n       */\n      mounted(el: HTMLElement, binding: any, vnode: any, prevVnode: any) {\n        el.setAttribute('not-translate', 'true')\n        queue.add({\n          el,\n          text: el.outerHTML,\n          translate: false,\n        })\n\n      },\n      /**\n       * v3.0 在绑定元素的父组件,及他自己的所有子节点都更新后调用\n       * @param el \n       * @param binding \n       * @param vnode \n       * @param prevVnode \n       */\n      updated(el: HTMLElement, binding: any, vnode: any, prevVnode: any) {\n        if (!el.getAttribute('not-translate')) {\n          el.setAttribute('not-translate', 'true')\n          queue.add({\n            el,\n            text: el.outerHTML,\n            translate: false,\n          })\n        }\n      },\n    }\n  }\n\n  /**\n   * registe `v-translate` directive\n   * @returns vue directive options\n   */\n  retaiteTranslateDirective() {\n    return {\n      /**\n       * [v2.0] 指令绑定到元素时\n       * @param el \n       * @param binding \n       * @param vnode \n       * @param prevVnode \n       */\n      bind: (el: HTMLElement, binding: any, vnode: any, prevVnode: any) => {\n        queue.add({\n          el,\n          text: el.outerHTML,\n          translate: true,\n          ...(binding.value || {})\n        })\n      },\n      /**\n       * [v2.0] 子组件和组件都更新完成时\n       * @param el \n       * @param binding \n       * @param vnode \n       * @param prevVnode \n       */\n      componentUpdated: (el: HTMLElement, binding: any, vnode: any, prevVnode: any) => {\n        queue.add({\n          el,\n          text: el.outerHTML,\n          translate: true,\n          ...(binding.value || {})\n        })\n      },\n      /**\n       * [v2.0] 指令与元素解绑时调用\n       * @param el \n       */\n      unbind: (el: HTMLElement) => {\n        queue.remove(el)\n      },\n      /**\n       * [v3.0] 在绑定元素的父组,及他自己的所有子节点都挂载完成后调用\n       * @param el \n       * @param binding \n       * @param vnode \n       * @param prevVnode \n       */\n      mounted: (el: HTMLElement, binding: any, vnode: any, prevVnode: any) => {\n        queue.add({\n          el,\n          text: el.outerHTML,\n          translate: true,\n          ...(binding.value || {})\n        })\n      },\n      /**\n       * [v3.0] 在绑定元素的父组件,及他自己的所有子节点都更新后调用\n       * @param el \n       * @param binding \n       * @param vnode \n       * @param prevVnode \n       */\n      updated: (el: HTMLElement, binding: any, vnode: any, prevVnode: any) => {\n        queue.add({\n          el,\n          text: el.outerHTML,\n          translate: true,\n          ...(binding.value || {})\n        })\n      },\n      /**\n       * [v3.0] 绑定元素的父组件卸载前调用\n       * @param el \n       * @param binding \n       * @param vnode \n       * @param prevVnode \n       */\n      beforeUnmount: (el: HTMLElement, binding: any, vnode: any, prevVnode: any) => {\n        queue.remove(el)\n      },\n    }\n  }\n\n}\n\n\nexport default {\n  install(app: any, options: PluginDefaultConfiguraOption) {\n\n    const plugin = new TranslateVuePlugin(options)\n    plugin.initQueue()\n\n    app.directive('translate', plugin.retaiteTranslateDirective())\n    app.directive('nottranslate', plugin.regsiteNotTranslateDirective())\n\n  }\n}","// this module should only have a default export\nimport { DeeplxTranslateEngine, DeeplxLanguage } from '../engines/index'\n\nimport TranslateVuePlugin from '../../plugins/vue/index'\n\nexport default {\n  DeeplxTranslateEngine,\n  DeeplxLanguage,\n  TranslateVuePlugin\n}","\n// This module is intended to unwrap Axios default export as named.\n\nimport Translate from './lib/core/translate'\n\nconst { DeeplxTranslateEngine,DeeplxLanguage, TranslateVuePlugin } = Translate\n\nexport {\n  Translate as default,\n  DeeplxTranslateEngine,\n  DeeplxLanguage,\n  TranslateVuePlugin\n}"],"names":["HttpClientRequestMethod","DeeplxLanguage","NodeHttpAdapter","send","options","Promise","resolve","reject","url","mesage","method","urlInfo","URL","canParse","window","location","origin","_options","Object","assign","hostname","port","path","pathname","search","_h","http.request","res","_data","setEncoding","on","chunk","Buffer","includes","headers","indexOf","JSON","parse","toString","code","statusCode","message","statusMessage","data","e","POST","write","stringify","Number","isInteger","timeout","setTimeout","end","HttpClientInstance","constructor","this","defaultOption","get","params","request","GET","post","HttpClient","create","TranslateEngineInstance","enine","_engine","singleTranslate","branchTranslate","translate","TranslationQueue","engine","_queue","_timer","add","push","clearTimeout","requestList","requestQueue","map","info","i1","_t","text","matchAll","reduce","addIndex","rex","i2","id","startIndex","index","endIndex","length","substring","src","target","languageMap","encodeText","then","console","log","forEach","ids","split","replace","el","innerHTML","remove","filter","queue","TranslateVuePlugin","Error","initQueue","regsiteNotTranslateDirective","bind","binding","vnode","prevVnode","setAttribute","outerHTML","update","getAttribute","mounted","updated","retaiteTranslateDirective","value","componentUpdated","unbind","beforeUnmount","TranslateVuePlugin$2","install","app","plugin","directive","Translate","authorization","ZH","EN","http","getLocalTranslateLanguageMapKeyByOption","getLocalTranslateLanguageMapInfoByKey","key","sort","v1","v2","width1","undefined","weight","requestTranslate","source_lang","target_lang","Authorization","encodeTranslateMapping","localLanguageMapInfo","decodeTranslateMapping","responseText","item","targetLanguageMapInfo","alternatives","_a","success","translateGroup","option","all","keys","language","encodeTranslateInfo","translateSrcText","join","v","i","finally","Array","DeeplxTranslateEngine"],"mappings":"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"}