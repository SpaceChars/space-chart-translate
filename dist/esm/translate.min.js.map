{"version":3,"file":"translate.min.js","sources":["../../lib/http/xhrAdapter.ts","../../lib/http/nodeHttpAdpater.ts","../../lib/http/adapter.ts","../../lib/core/engine.ts","../../platform/vue/index.ts","../../lib/core/translate.ts","../../index.ts"],"sourcesContent":["import { HtptClientResponseOption, HttpClientRequestOption, IHttpAdapter } from \"./adapter\";\n\nexport default class XHRAdapter implements IHttpAdapter {\n\n  send<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>> {\n    return new Promise<HtptClientResponseOption<T>>((resolve, reject) => {\n      reject({})\n    })\n  }\n\n}","import * as http from 'http'\nimport { Buffer } from 'buffer';\nimport { HtptClientResponseOption, HttpClientRequestMethod, HttpClientRequestOption, IHttpAdapter } from './adapter';\n\nexport default class NodeHttpAdapter implements IHttpAdapter {\n\n  send<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>> {\n    return new Promise<HtptClientResponseOption<T>>((resolve, reject) => {\n\n      if (!options.url) {\n        return reject({\n          mesage: 'The request url is empty'\n        })\n      }\n\n      if (!options.method) {\n        return reject({\n          mesage: 'The request method is empty'\n        })\n      }\n\n      const urlInfo = new URL(options.url);\n\n      const _options = Object.assign(options, {\n        hostname: urlInfo.hostname || window.location.hostname || '127.0.0.1',\n        port: urlInfo.port || 80,\n        path: urlInfo.pathname + urlInfo.search || ''\n      })\n\n      delete _options.url;\n\n      //创建请求示例\n      const _h = http.request(\n        _options,\n        (res: any) => {\n          //设置响应编码\n          res.setEncoding('utf8');\n\n          //监听数据响应\n          let _data: any;\n          res.on('data', (chunk: any) => {\n\n            if (!_data) return _data = chunk;\n            _data instanceof Buffer ? (_data.includes(chunk)) : (_data += chunk)\n\n          })\n\n          //监听响应结束\n          res.on('end', () => {\n\n            if ((res.headers['content-type'] || '').indexOf('application/json') >= 0) _data = JSON.parse(_data.toString() || '')\n\n            resolve({\n              code: res.statusCode || 500,\n              message: res.statusMessage,\n              data: _data\n            })\n          })\n\n\n        }\n      );\n\n      //错误拦截\n      _h.on('error', (e: any) => {\n        reject({\n          message: e.message\n        })\n      })\n\n      //添加内容到body\n      if (options.method == HttpClientRequestMethod.POST) {\n        _h.write(JSON.stringify(options.data))\n      }\n\n      //设置超时时间\n      if (!Number.isInteger(options.timeout) || Number(options.timeout) > 0) {\n        _h.setTimeout(options.timeout || 60000, () => {\n          reject({\n            message: 'time out'\n          })\n        })\n      }\n\n\n      //结束写入\n      _h.end();\n\n    });\n  }\n\n}","import XHRAdapter from './xhrAdapter';\nimport NodeHttpAdapter from './nodeHttpAdpater'\n\n/**\n * 请求方法\n */\nexport enum HttpClientRequestMethod {\n  GET = 'get',\n  POST = 'post'\n}\n\nexport interface HttpClientRequestDefaultOption {\n  timeout?: number\n}\n\n/**\n * 请求体配置属性\n */\nexport interface HttpClientRequestOption extends HttpClientRequestDefaultOption {\n  url?: string\n  method?: HttpClientRequestMethod | string\n  headers?: { [name: string]: string }\n  params?: any\n  data?: any\n}\n\n/**\n * 错误响应属性\n */\nexport interface HtptClientResponseError {\n  message?: string\n  code?: number | string\n}\n\n/**\n * 正常响应属性\n */\nexport interface HtptClientResponseOption<T> extends HtptClientResponseError {\n  data: T | null\n}\n\nexport interface IHttpAdapter {\n  send<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n}\n\n/**\n * 请求客户端接口\n */\ninterface IHttpClient {\n  get<T>(url: string, params?: any, options?: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n  post<T>(url: string, data?: any, options?: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n  request<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n\n}\n\nexport class HttpClientInstance implements IHttpClient {\n  private defaultOption: HttpClientRequestOption\n\n  constructor(options: HttpClientRequestOption) {\n    this.defaultOption = options\n  }\n\n  get<T>(url: string, params?: any, options?: HttpClientRequestOption | undefined): Promise<HtptClientResponseOption<T>> {\n    return this.request<T>(Object.assign(this.defaultOption, options, { url, method: HttpClientRequestMethod.GET, params }))\n  }\n\n  post<T>(url: string, data?: any, options?: HttpClientRequestOption | undefined): Promise<HtptClientResponseOption<T>> {\n    return this.request<T>(Object.assign(this.defaultOption, options, { url, method: HttpClientRequestMethod.POST, data }))\n  }\n\n  request<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>> {\n    const adapter = typeof window.XMLHttpRequest !== 'undefined' ? new XHRAdapter() : new NodeHttpAdapter();\n    return adapter.send<T>(Object.assign(this.defaultOption, options))\n  }\n}\n\nexport class HttpClient {\n  create(options: HttpClientRequestDefaultOption): HttpClientInstance {\n    return new HttpClientInstance(options)\n  }\n}\n\nexport default new HttpClient()","\nimport HttpClient, { HtptClientResponseOption, HttpClientInstance } from '../http/adapter'\n\n/**\n * 翻译语言\n */\nexport enum TranslateLang {\n  ZH = 'ZH',\n  EN = 'EN',\n}\n\n/**\n * 语言词典库——单项词典信息\n */\nexport interface LangMapItemInfo {\n  src: string\n  target: string\n  weight?: number\n}\n\n/**\n * 默认翻译语言配置\n */\nexport interface TranslateConfigLangDefaultOption {\n  src: TranslateLang | string\n  target: TranslateLang | string\n  langMap?: { [name: TranslateLang | string]: Array<LangMapItemInfo> }\n}\n\nexport interface TranslateConfigDefaultOption extends TranslateConfigLangDefaultOption {\n  host: string\n  timeout?: number\n}\n\n/**\n * 翻译配置\n */\nexport interface TranslateConfigOption extends TranslateConfigLangDefaultOption {\n  text?: string\n  id: string | number\n}\n\n/**\n * 翻译响应信息\n */\nexport interface TranslateResponseOption {\n  alternatives: Array<string> | null\n  data: string\n  id: string | number\n  success: Boolean\n}\n\n/**\n * 翻译引擎接口类\n */\nexport interface ITranslateEngine {\n  translate(options: TranslateConfigOption | Array<TranslateConfigOption>): Promise<Array<HtptClientResponseOption<TranslateResponseOption>>>;\n}\n\n/**\n * 翻译引擎\n */\nexport class TranslateEngine implements ITranslateEngine {\n\n  private src;\n  private target;\n  private langMap;\n\n  private host;\n  private http: HttpClientInstance;\n\n  constructor(options: TranslateConfigDefaultOption) {\n\n    if (!options.host) {\n      throw new Error('The deeplx host address cannot be emptry')\n    }\n\n    this.src = options.src || TranslateLang.ZH\n    this.target = options.target || TranslateLang.EN\n    this.langMap = options.langMap || {}\n\n    this.host = options.host;\n    this.http = HttpClient.create({\n      timeout: options.timeout\n    })\n  }\n\n  /**\n   * 映射本地语言表\n   * @param targetLang \n   * @param info \n   * @returns \n   */\n  translateMapping(targetLangMapInfo: Array<LangMapItemInfo>, info: TranslateConfigOption): TranslateConfigOption {\n\n    //深拷贝，避免数据影响\n    info = JSON.parse(JSON.stringify(info));\n\n    let text = info.text || '';\n    targetLangMapInfo.forEach((map, index) => {\n      text = text.replace(map.src, '${' + index + '}')\n    })\n    info.text = text;\n\n    return info;\n  }\n\n\n  /**\n   * 翻译\n   * @param options \n   * @returns \n   */\n  translate(options: TranslateConfigOption | Array<TranslateConfigOption>) {\n\n    if (!(options instanceof Array)) {\n      options = [options]\n    }\n\n    // 按源语言和目标语言进行分组\n    const translateGroup: { [name: string]: Array<TranslateConfigOption> } = {};\n    options.forEach((option, index) => {\n\n      const key = `${option.src || this.src}-${option.target || this.target}`;\n      const info: Array<TranslateConfigOption> = translateGroup[key] || [];\n      info.push(option)\n      translateGroup[key] = info;\n\n    })\n\n    //按照翻译分组分别进行翻译\n    return Promise.all(Object.keys(translateGroup).map(key => {\n\n      const lang = key.split('-');\n\n      //获取目标语言中的本地语言映射表，并根据\n      const targetLangMapInfo = (this.langMap[key] || []).sort((v1, v2) => {\n        const width1 = v1.weight == undefined ? 0 : v1.weight\n        const width2 = v2.weight == undefined ? 0 : v2.weight\n        return width2 - width1;\n      })\n\n      //标记后的数据\n      const group = translateGroup[key].map(item => this.translateMapping(targetLangMapInfo, item))\n\n      let translateSrcText = JSON.stringify(group.map(item => item.text));\n\n      return this.http.post<TranslateResponseOption>(this.host + '/translate',\n        {\n          \"text\": translateSrcText,\n          \"source_lang\": lang[0],\n          \"target_lang\": lang[1]\n        }, {\n        headers: {\n          'Authorization': 'Bearer deeplx'\n        }\n      }).then((res) => {\n\n        if (res.code == 200) {\n          //如果翻译成功，则替换对应目标变量\n\n          res.data = JSON.parse(res.data?.data || '[]').map((v: string, i: number) => {\n            const info = group[i];\n            targetLangMapInfo.forEach((item, index) => {\n              v = v.replace('${' + index + '}', item.target)\n            })\n            return {\n              alternatives: (res.data || {}).alternatives || null,\n              data: v,\n              id: info.id,\n              success: true\n            }\n          })\n        } else {\n          // 如果翻译失败，则返回原数据\n          res.data = translateGroup[key].map(info => {\n            return {\n              alternatives: null,\n              data: info.text,\n              id: info.id,\n              success: false\n            }\n          }) as any\n        }\n\n        return res\n      })\n    }))\n\n\n  }\n\n}\n\nexport default TranslateEngine","import { TranslateEngine, TranslateConfigDefaultOption, TranslateLang } from '../../lib/core/engine';\nimport { } from 'vue'\n\nclass TranslateVuePlugin {\n\n  private engine: TranslateEngine\n\n  constructor(options: TranslateConfigDefaultOption) {\n    this.engine = new TranslateEngine(options)\n  }\n\n  translateVUE2() {\n    return {\n      bind(el: any, binding: any, vnode: any, prevVnode: any) {\n\n      },\n      inserted() {\n\n      },\n      update() {\n\n      },\n      componentUpdated() {\n\n      },\n      unbind() {\n\n      }\n    }\n  }\n\n  translateVUE3() {\n    return {\n      // 在绑定元素的 attribute 前\n      // 或事件监听器应用前调用\n      created(el: any, binding: any, vnode: any, prevVnode: any) {\n        // 下面会介绍各个参数的细节\n      },\n      // 在元素被插入到 DOM 前调用\n      beforeMount(el: any, binding: any, vnode: any, prevVnode: any) { },\n      // 在绑定元素的父组件\n      // 及他自己的所有子节点都挂载完成后调用\n      mounted(el: any, binding: any, vnode: any, prevVnode: any) { },\n      // 绑定元素的父组件更新前调用\n      beforeUpdate(el: any, binding: any, vnode: any, prevVnode: any) { },\n      // 在绑定元素的父组件\n      // 及他自己的所有子节点都更新后调用\n      updated(el: any, binding: any, vnode: any, prevVnode: any) { },\n      // 绑定元素的父组件卸载前调用\n      beforeUnmount(el: any, binding: any, vnode: any, prevVnode: any) { },\n      // 绑定元素的父组件卸载后调用\n      unmounted(el: any, binding: any, vnode: any, prevVnode: any) { }\n    }\n  }\n\n}\n\n\nexport default {\n  install(app: any, options: TranslateConfigDefaultOption) {\n\n    console.log('----xhr', typeof XMLHttpRequest !== 'undefined');\n\n    const plugin = new TranslateVuePlugin(options)\n\n    const version = Number(app.version.split('.')[0])\n    if (version < 3) {\n      app.directive('translate', plugin.translateVUE2())\n      app.prototype.$translate = plugin.translateVUE2\n    } else {\n      app.directive('translate', plugin.translateVUE3())\n      app.config.globalProperties.$translate = plugin.translateVUE3\n    }\n  }\n}","import { TranslateEngine } from './engine';\n\nimport TranslateVuePlugin from '../../platform/vue/index'\n\nconst Translate = {\n  TranslateEngine,\n  TranslateVuePlugin\n}\n\nexport default Translate","\nimport Translate from './lib/core/translate'\n\nconst { TranslateEngine, TranslateVuePlugin } = Translate\nexport {\n  Translate as default,\n  TranslateEngine,\n  TranslateVuePlugin\n}"],"names":["XHRAdapter","prototype","send","options","Promise","resolve","reject","HttpClientRequestMethod","NodeHttpAdapter","url","mesage","method","urlInfo","URL","_options","Object","assign","hostname","window","location","port","path","pathname","search","_h","http.request","res","_data","setEncoding","on","chunk","Buffer","includes","headers","indexOf","JSON","parse","toString","code","statusCode","message","statusMessage","data","e","POST","write","stringify","Number","isInteger","timeout","setTimeout","end","HttpClientInstance","this","defaultOption","get","params","request","GET","post","XMLHttpRequest","HttpClient$1","HttpClient","create","TranslateLang","TranslateEngine","host","Error","src","ZH","target","EN","langMap","http","translateMapping","targetLangMapInfo","info","text","forEach","map","index","replace","translate","_this","Array","translateGroup","option","key","concat","push","all","keys","lang","split","sort","v1","v2","width1","undefined","weight","group","item","translateSrcText","source_lang","target_lang","Authorization","then","_a","v","i","alternatives","id","success","TranslateVuePlugin","engine","translateVUE2","bind","el","binding","vnode","prevVnode","inserted","update","componentUpdated","unbind","translateVUE3","created","beforeMount","mounted","beforeUpdate","updated","beforeUnmount","unmounted","Translate","install","app","console","log","plugin","version","directive","$translate","config","globalProperties"],"mappings":"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"}