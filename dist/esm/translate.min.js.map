{"version":3,"file":"translate.min.js","sources":["../../lib/http/adapter.ts","../../lib/engines/deeplx.ts","../../lib/http/nodeHttpAdpater.ts","../../lib/core/translate.ts","../../lib/core/engine.ts","../../index.ts"],"sourcesContent":["import XHRAdapter from './xhrAdapter';\nimport NodeHttpAdapter from './nodeHttpAdpater'\n\n/**\n * 请求方法\n */\nexport enum HttpClientRequestMethod {\n  GET = 'GET',\n  POST = 'POST'\n}\n\nexport interface HttpClientRequestDefaultOption {\n  timeout?: number\n}\n\n/**\n * 请求体配置属性\n */\nexport interface HttpClientRequestOption extends HttpClientRequestDefaultOption {\n  url?: string\n  method?: HttpClientRequestMethod | string\n  headers?: { [name: string]: string }\n  params?: any\n  data?: any\n}\n\n/**\n * 错误响应属性\n */\nexport interface HtptClientResponseError {\n  message?: string\n  code?: number | string\n}\n\n/**\n * 正常响应属性\n */\nexport interface HtptClientResponseOption<T> extends HtptClientResponseError {\n  data: T | null\n}\n\nexport interface IHttpAdapter {\n  send<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n}\n\n/**\n * 请求客户端接口\n */\ninterface IHttpClient {\n  get<T>(url: string, params?: any, options?: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n  post<T>(url: string, data?: any, options?: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n  request<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n\n}\n\nexport class HttpClientInstance implements IHttpClient {\n  private defaultOption: HttpClientRequestOption\n\n  constructor(options: HttpClientRequestOption) {\n    this.defaultOption = options\n  }\n\n  get<T>(url: string, params?: any, options?: HttpClientRequestOption | undefined): Promise<HtptClientResponseOption<T>> {\n    return this.request<T>(Object.assign(this.defaultOption, options, { url, method: HttpClientRequestMethod.GET, params }))\n  }\n\n  post<T>(url: string, data?: any, options?: HttpClientRequestOption | undefined): Promise<HtptClientResponseOption<T>> {\n    return this.request<T>(Object.assign(this.defaultOption, options, { url, method: HttpClientRequestMethod.POST, data }))\n  }\n\n  request<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>> {\n    // const adapter = typeof XMLHttpRequest !== 'undefined' ? new XHRAdapter() : new NodeHttpAdapter();\n    const adapter = new NodeHttpAdapter();\n    return adapter.send<T>(Object.assign(this.defaultOption, options))\n  }\n}\n\nexport class HttpClient {\n  static create(options: HttpClientRequestDefaultOption): HttpClientInstance {\n    return new HttpClientInstance(options)\n  }\n}\n\nexport default HttpClient","import { ITranslateEngine, LanguageMapItemInfo, TranslateConfigOption, TranslateDefaultConfiguraOption, TranslateResponseOption } from \"../core/engine\";\nimport { HttpClient, HttpClientInstance } from \"../http/adapter\";\n\nexport enum DeeplxLanguage {\n  ZH = 'ZH',\n  EN = 'EN'\n}\n\nexport interface DeeplxDefaultConfiguraOption extends TranslateDefaultConfiguraOption {\n  url: string\n  authorization: string\n  timeout?: number\n}\n\nexport class DeeplxTranslateEngine implements ITranslateEngine {\n\n  private src;\n  private target;\n  private languageMap;\n\n  private url;\n  private authorization;\n  private http: HttpClientInstance;\n\n  constructor(options: DeeplxDefaultConfiguraOption) {\n\n    if (!options.url) {\n      throw new Error('The deeplx translation address cannot be emptry')\n    }\n\n    if (!options.authorization) {\n      throw new Error('The deeplx request token cannot be emptry')\n    }\n\n    if (!options.src) {\n      throw new Error('The source language cannot be emptry')\n    }\n\n    if (!options.target) {\n      throw new Error('The target language cannot be emptry')\n    }\n\n    this.src = options.src || DeeplxLanguage.ZH\n    this.target = options.target || DeeplxLanguage.EN\n    this.languageMap = options.languageMap || {}\n\n    this.url = options.url;\n    this.authorization = options.authorization;\n    this.http = HttpClient.create({\n      timeout: options.timeout\n    })\n  }\n\n  /**\n   * 根据配置信息获取本地语言映射表映射标识\n   * @param options 配置信息\n   * @returns \n   */\n  private getLocalTranslateLanguageMapKeyByOption(options: TranslateConfigOption): string {\n    return `${options.src || this.src}-${options.target || this.target}`;\n  }\n\n  /**\n   * 根据key获取本地语言映射表信息\n   * @param key 映射标识 格式：[srcource language]-[target language]\n   * @returns \n   */\n  private getLocalTranslateLanguageMapInfoByKey(key: string): Array<LanguageMapItemInfo> {\n    return (this.languageMap[key] || []).sort((v1, v2) => {\n      const width1 = v1.weight == undefined ? 0 : v1.weight\n      const width2 = v2.weight == undefined ? 0 : v2.weight\n      return width2 - width1;\n    })\n  }\n\n  /**\n   * 发送翻译请求\n   * @param text 需要翻译的文本\n   * @param src 源语言\n   * @param target 目标语言\n   * @returns \n   */\n  private requestTranslate(text: string, src: DeeplxLanguage | string, target: DeeplxLanguage | string) {\n    return this.http.post<TranslateResponseOption>(this.url,\n      {\n        \"text\": text,\n        \"source_lang\": src || this.src,\n        \"target_lang\": target || this.target\n      }, {\n      headers: {\n        'Authorization': this.authorization\n      }\n    })\n  }\n\n  /**\n   * 根据本地语言映射表标记原始文本\n   * @param localLanguageMapInfo \n   * @param info \n   * @returns \n   */\n  encodeTranslateMapping(localLanguageMapInfo: Array<LanguageMapItemInfo>, info: TranslateConfigOption): TranslateConfigOption {\n\n    info = JSON.parse(JSON.stringify(info));\n    let text = info.text || '';\n\n    localLanguageMapInfo.forEach((map, index) => {\n      text = text.replace(map.src, '${' + index + '}')\n    })\n\n    info.text = text;\n    return info;\n  }\n\n\n  /**\n   * 根据本地语言映射表解析翻译结果\n   * @param key 映射标识\n   * @param responseText 翻译响应结果文本\n   * @returns \n   */\n  decodeTranslateMapping(localLanguageMapInfo: Array<LanguageMapItemInfo>, responseText: string): string {\n    localLanguageMapInfo.forEach((item, index) => {\n      responseText = responseText.replace('${' + index + '}', item.target)\n    })\n    return responseText;\n  }\n\n  /**\n   * 单个翻译\n   * @param options \n   */\n  singleTranslate(options: TranslateConfigOption): Promise<TranslateResponseOption> {\n    return new Promise((resolve, reject) => {\n\n      //是否是需要忽略翻译的文本\n      const ignore = options.text == null || options.text == undefined || options.text.length <= 0 || !Number.isNaN(Number(options.text))\n      if (ignore) {\n        return resolve({\n          alternatives: null,\n          data: options.text || '',\n          id: options.id,\n          success: false\n        })\n      }\n\n      const targetLanguageMapInfo = this.getLocalTranslateLanguageMapInfoByKey(this.getLocalTranslateLanguageMapKeyByOption(options))\n\n      const _options = this.encodeTranslateMapping(targetLanguageMapInfo, options)\n\n      this.requestTranslate(_options.text || '', _options.src, _options.target).then((res) => {\n        resolve(res.code == 200 && res.data?.data ? {\n          alternatives: (res.data || {}).alternatives || null,\n          data: this.decodeTranslateMapping(targetLanguageMapInfo, res.data?.data || ''),\n          id: options.id || '',\n          success: true\n        } : {\n          alternatives: null,\n          data: options.text || '',\n          id: options.id || '',\n          success: false\n        }\n        )\n\n      })\n    })\n  }\n\n  /**\n   * 批量翻译\n   * @param options \n   */\n  branchTranslate(options: Array<TranslateConfigOption>): Promise<Array<TranslateResponseOption>> {\n\n    return new Promise((resolve, reject) => {\n\n      const requestList: Array<TranslateResponseOption> = []\n\n      Promise.all(options.map(info => this.singleTranslate(info))).then((res) => {\n        requestList.push(...res)\n      }).finally(() => {\n        resolve(requestList)\n      })\n\n    })\n\n  }\n\n\n  /**\n   * \n   * @param options Translation Configura Option\n   * @returns If options dont instance of array,or options length is one return `Pormise<TranslateResponseOption>`,\n   * otherwise return `Promise<Array<TranslateResponseOption>>` type\n   * \n   */\n  translate(options: TranslateConfigOption | Array<TranslateConfigOption>): Promise<TranslateResponseOption> | Promise<Array<TranslateResponseOption>> {\n    return !(options instanceof Array) ? this.singleTranslate(options) : options.length == 1 ? this.singleTranslate(options[0]) : this.branchTranslate(options)\n  }\n\n}\n\nexport default {}","import * as http from 'http'\nimport { Buffer } from 'buffer';\nimport { HtptClientResponseOption, HttpClientRequestMethod, HttpClientRequestOption, IHttpAdapter } from './adapter';\n\nexport default class NodeHttpAdapter implements IHttpAdapter {\n\n  send<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>> {\n    return new Promise<HtptClientResponseOption<T>>((resolve, reject) => {\n\n      if (!options.url) {\n        return reject({\n          mesage: 'The request url is empty'\n        })\n      }\n\n      if (!options.method) {\n        return reject({\n          mesage: 'The request method is empty'\n        })\n      }\n\n      const urlInfo = new URL(URL.canParse(options.url) ? options.url : window.location.origin + options.url);\n\n      const _options = Object.assign(options, {\n        hostname: urlInfo.hostname || window.location.hostname,\n        port: urlInfo.port || 80,\n        path: urlInfo.pathname + urlInfo.search || '',\n      })\n\n      delete _options.url;\n\n      //创建请求示例\n      const _h = http.request(\n        _options,\n        (res: any) => {\n          //设置响应编码\n          res.setEncoding('utf8');\n\n          //监听数据响应\n          let _data: any;\n          res.on('data', (chunk: any) => {\n\n            if (!_data) return _data = chunk;\n            _data instanceof Buffer ? (_data.includes(chunk)) : (_data += chunk)\n\n          })\n\n          //监听响应结束\n          res.on('end', () => {\n\n            if ((res.headers['content-type'] || '').indexOf('application/json') >= 0) _data = JSON.parse(_data.toString() || '')\n\n            resolve({\n              code: res.statusCode || 500,\n              message: res.statusMessage,\n              data: _data\n            })\n          })\n\n\n        }\n      );\n\n      //错误拦截\n      _h.on('error', (e: any) => {\n        reject({\n          message: e.message\n        })\n      })\n\n      //添加内容到body\n      if (options.method == HttpClientRequestMethod.POST) {\n        _h.write(JSON.stringify(options.data))\n      }\n\n      //设置超时时间\n      if (!Number.isInteger(options.timeout) || Number(options.timeout) > 0) {\n        _h.setTimeout(options.timeout || 60000, () => {\n          reject({\n            message: 'time out'\n          })\n        })\n      }\n\n\n      //结束写入\n      _h.end();\n\n    });\n  }\n\n}","// this module should only have a default export\nimport { DeeplxTranslateEngine, DeeplxLanguage } from '../engines/index'\nimport {TranslateEngineInstance} from './engine'\n\nexport default {\n  DeeplxTranslateEngine,\n  DeeplxLanguage,\n  TranslateEngineInstance\n}","\nimport HttpClient, { HtptClientResponseOption, HttpClientInstance } from '../http/adapter'\n\n/**\n * 语言词典库——单项词典信息\n */\nexport interface LanguageMapItemInfo {\n  src: string\n  target: string\n  weight?: number\n}\n\n/**\n * 默认翻译语言配置\n */\nexport interface TranslateDefaultConfiguraOption {\n  src: string\n  target: string\n  languageMap?: { [name: string]: Array<LanguageMapItemInfo> }\n}\n\n/**\n * 翻译配置\n */\nexport interface TranslateConfigOption extends TranslateDefaultConfiguraOption {\n  text?: string\n  id: string | number\n}\n\n/**\n * 翻译响应信息\n */\nexport interface TranslateResponseOption {\n  alternatives: Array<string> | null\n  data: string\n  id: string | number\n  success: Boolean\n}\n\n/**\n * 翻译引擎接口类\n */\nexport interface ITranslateEngine {\n  translate(options: TranslateConfigOption | Array<TranslateConfigOption>): Promise<TranslateResponseOption> | Promise<Array<TranslateResponseOption>>;\n  singleTranslate(options: TranslateConfigOption): Promise<TranslateResponseOption>\n  branchTranslate(options: Array<TranslateConfigOption>): Promise<Array<TranslateResponseOption>>\n}\n\nexport class TranslateEngineInstance implements ITranslateEngine {\n  private _engine: ITranslateEngine;\n\n  constructor(enine: ITranslateEngine) {\n    this._engine = enine\n  }\n\n  singleTranslate(options: TranslateConfigOption): Promise<TranslateResponseOption> {\n    return this._engine.singleTranslate(options)\n  }\n  \n  branchTranslate(options: TranslateConfigOption[]): Promise<TranslateResponseOption[]> {\n    return this._engine.branchTranslate(options)\n  }\n\n  translate(options: TranslateConfigOption | TranslateConfigOption[]): Promise<TranslateResponseOption> | Promise<TranslateResponseOption[]> {\n    return this._engine.translate(options)\n  }\n\n}","\n// This module is intended to unwrap Axios default export as named.\n\nimport Translate from './lib/core/translate'\n\nconst { DeeplxTranslateEngine, DeeplxLanguage, TranslateEngineInstance } = Translate\n\nexport {\n  Translate as default,\n  DeeplxTranslateEngine,\n  DeeplxLanguage,\n  TranslateEngineInstance\n}"],"names":["HttpClientRequestMethod","DeeplxLanguage","NodeHttpAdapter","send","options","Promise","resolve","reject","url","mesage","method","urlInfo","URL","canParse","window","location","origin","_options","Object","assign","hostname","port","path","pathname","search","_h","http.request","res","_data","setEncoding","on","chunk","Buffer","includes","headers","indexOf","JSON","parse","toString","code","statusCode","message","statusMessage","data","e","POST","write","stringify","Number","isInteger","timeout","setTimeout","end","HttpClientInstance","constructor","this","defaultOption","get","params","request","GET","post","HttpClient","create","Translate","Error","authorization","src","target","ZH","EN","languageMap","http","getLocalTranslateLanguageMapKeyByOption","getLocalTranslateLanguageMapInfoByKey","key","sort","v1","v2","width1","undefined","weight","requestTranslate","text","source_lang","target_lang","Authorization","encodeTranslateMapping","localLanguageMapInfo","info","forEach","map","index","replace","decodeTranslateMapping","responseText","item","singleTranslate","length","isNaN","alternatives","id","success","targetLanguageMapInfo","then","_a","_b","branchTranslate","requestList","all","push","finally","translate","Array","enine","_engine","DeeplxTranslateEngine","TranslateEngineInstance"],"mappings":"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"}