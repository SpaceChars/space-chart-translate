{"version":3,"file":"translate.min.js","sources":["../lib/http/xhrAdapter.ts","../lib/http/nodeHttpAdpater.ts","../lib/http/adapter.ts","../lib/core/engine.ts","../platform/vue/index.ts","../lib/core/translate.ts"],"sourcesContent":["import { HtptClientResponseOption, HttpClientRequestOption, IHttpAdapter } from \"./adapter\";\n\nexport default class XHRAdapter implements IHttpAdapter {\n\n  send<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>> {\n    return new Promise<HtptClientResponseOption<T>>((resolve, reject) => {\n      reject({})\n    })\n  }\n\n}","import * as http from 'http'\nimport { Buffer } from 'buffer';\nimport { HtptClientResponseOption, HttpClientRequestMethod, HttpClientRequestOption, IHttpAdapter } from './adapter';\n\nexport default class NodeHttpAdapter implements IHttpAdapter {\n\n  send<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>> {\n    return new Promise<HtptClientResponseOption<T>>((resolve, reject) => {\n\n      if (!options.url) {\n        return reject({\n          mesage: 'The request url is empty'\n        })\n      }\n\n      if (!options.method) {\n        return reject({\n          mesage: 'The request method is empty'\n        })\n      }\n\n      const urlInfo = new URL(options.url);\n\n      const _options = Object.assign(options, {\n        hostname: urlInfo.hostname || window.location.hostname || '127.0.0.1',\n        port: urlInfo.port || 80,\n        path: urlInfo.pathname + urlInfo.search || ''\n      })\n\n      delete _options.url;\n\n      //创建请求示例\n      const _h = http.request(\n        _options,\n        (res: any) => {\n          //设置响应编码\n          res.setEncoding('utf8');\n\n          //监听数据响应\n          let _data: any;\n          res.on('data', (chunk: any) => {\n\n            if (!_data) return _data = chunk;\n            _data instanceof Buffer ? (_data.includes(chunk)) : (_data += chunk)\n\n          })\n\n          //监听响应结束\n          res.on('end', () => {\n\n            if ((res.headers['content-type'] || '').indexOf('application/json') >= 0) _data = JSON.parse(_data.toString() || '')\n\n            resolve({\n              code: res.statusCode || 500,\n              message: res.statusMessage,\n              data: _data\n            })\n          })\n\n\n        }\n      );\n\n      //错误拦截\n      _h.on('error', (e: any) => {\n        reject({\n          message: e.message\n        })\n      })\n\n      //添加内容到body\n      if (options.method == HttpClientRequestMethod.POST) {\n        _h.write(JSON.stringify(options.data))\n      }\n\n      //设置超时时间\n      if (!Number.isInteger(options.timeout) || Number(options.timeout) > 0) {\n        _h.setTimeout(options.timeout || 60000, () => {\n          reject({\n            message: 'time out'\n          })\n        })\n      }\n\n\n      //结束写入\n      _h.end();\n\n    });\n  }\n\n}","import XHRAdapter from './xhrAdapter';\nimport NodeHttpAdapter from './nodeHttpAdpater'\n\n/**\n * 请求方法\n */\nexport enum HttpClientRequestMethod {\n  GET = 'get',\n  POST = 'post'\n}\n\nexport interface HttpClientRequestDefaultOption {\n  timeout?: number\n}\n\n/**\n * 请求体配置属性\n */\nexport interface HttpClientRequestOption extends HttpClientRequestDefaultOption {\n  url?: string\n  method?: HttpClientRequestMethod | string\n  headers?: { [name: string]: string }\n  params?: any\n  data?: any\n}\n\n/**\n * 错误响应属性\n */\nexport interface HtptClientResponseError {\n  message?: string\n  code?: number | string\n}\n\n/**\n * 正常响应属性\n */\nexport interface HtptClientResponseOption<T> extends HtptClientResponseError {\n  data: T | null\n}\n\nexport interface IHttpAdapter {\n  send<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n}\n\n/**\n * 请求客户端接口\n */\ninterface IHttpClient {\n  get<T>(url: string, params?: any, options?: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n  post<T>(url: string, data?: any, options?: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n  request<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>>\n\n}\n\nexport class HttpClientInstance implements IHttpClient {\n  private defaultOption: HttpClientRequestOption\n\n  constructor(options: HttpClientRequestOption) {\n    this.defaultOption = options\n  }\n\n  get<T>(url: string, params?: any, options?: HttpClientRequestOption | undefined): Promise<HtptClientResponseOption<T>> {\n    return this.request<T>(Object.assign(this.defaultOption, options, { url, method: HttpClientRequestMethod.GET, params }))\n  }\n\n  post<T>(url: string, data?: any, options?: HttpClientRequestOption | undefined): Promise<HtptClientResponseOption<T>> {\n    return this.request<T>(Object.assign(this.defaultOption, options, { url, method: HttpClientRequestMethod.POST, data }))\n  }\n\n  request<T>(options: HttpClientRequestOption): Promise<HtptClientResponseOption<T>> {\n    const adapter = typeof XMLHttpRequest !== 'undefined' ? new XHRAdapter() : new NodeHttpAdapter();\n    return adapter.send<T>(Object.assign(this.defaultOption, options))\n  }\n}\n\nexport class HttpClient {\n  create(options: HttpClientRequestDefaultOption): HttpClientInstance {\n    return new HttpClientInstance(options)\n  }\n}\n\nexport default new HttpClient()","\nimport HttpClient, { HtptClientResponseOption, HttpClientInstance } from '../http/adapter'\n\n/**\n * 翻译语言\n */\nexport enum TranslationLanguage {\n  ZH = 'ZH',\n  EN = 'EN',\n}\n\n/**\n * 语言词典库——单项词典信息\n */\nexport interface LanguageMapItemInfo {\n  src: string\n  target: string\n  weight?: number\n}\n\n/**\n * 默认翻译语言配置\n */\nexport interface TranslateConfigLanguageDefaultOption {\n  src: TranslationLanguage | string\n  target: TranslationLanguage | string\n  languageMap?: { [name: TranslationLanguage | string]: Array<LanguageMapItemInfo> }\n}\n\nexport interface TranslateConfigDefaultOption extends TranslateConfigLanguageDefaultOption {\n  host: string\n  authorization: string\n  timeout?: number\n}\n\n/**\n * 翻译配置\n */\nexport interface TranslateConfigOption extends TranslateConfigLanguageDefaultOption {\n  text?: string\n  id: string | number\n}\n\n/**\n * 翻译响应信息\n */\nexport interface TranslateResponseOption {\n  alternatives: Array<string> | null\n  data: string\n  id: string | number\n  success: Boolean\n}\n\n/**\n * 翻译引擎接口类\n */\nexport interface ITranslateEngine {\n  translate(options: TranslateConfigOption | Array<TranslateConfigOption>): Promise<TranslateResponseOption> | Promise<Array<TranslateResponseOption>>;\n}\n\n/**\n * 翻译引擎\n */\nexport class TranslateEngine implements ITranslateEngine {\n\n  private src;\n  private target;\n  private languageMap;\n\n  private host;\n  private authorization;\n  private http: HttpClientInstance;\n\n  constructor(options: TranslateConfigDefaultOption) {\n\n    if (!options.host) {\n      throw new Error('The deeplx host address cannot be emptry')\n    }\n\n    if (!options.authorization) {\n      throw new Error('The deeplx request token cannot be emptry')\n    }\n\n    if (!options.src) {\n      throw new Error('The source language cannot be emptry')\n    }\n\n    if (!options.target) {\n      throw new Error('The target language cannot be emptry')\n    }\n\n    this.src = options.src || TranslationLanguage.ZH\n    this.target = options.target || TranslationLanguage.EN\n    this.languageMap = options.languageMap || {}\n\n    this.host = options.host;\n    this.authorization = options.authorization;\n    this.http = HttpClient.create({\n      timeout: options.timeout\n    })\n  }\n\n  /**\n   * 根据配置信息获取本地语言映射表映射标识\n   * @param options 配置信息\n   * @returns \n   */\n  private getLocalTranslateLanguageMapKeyByOption(options: TranslateConfigOption): string {\n    return `${options.src || this.src}-${options.target || this.target}`;\n  }\n\n  /**\n   * 根据key获取本地语言映射表信息\n   * @param key 映射标识 格式：[srcource language]-[target language]\n   * @returns \n   */\n  private getLocalTranslateLanguageMapInfoByKey(key: string): Array<LanguageMapItemInfo> {\n    return (this.languageMap[key] || []).sort((v1, v2) => {\n      const width1 = v1.weight == undefined ? 0 : v1.weight\n      const width2 = v2.weight == undefined ? 0 : v2.weight\n      return width2 - width1;\n    })\n  }\n\n  /**\n   * 发送翻译请求\n   * @param text 需要翻译的文本\n   * @param src 源语言\n   * @param target 目标语言\n   * @returns \n   */\n  private requestTranslate(text: string, src: TranslationLanguage | string, target: TranslationLanguage | string) {\n    return this.http.post<TranslateResponseOption>(this.host + '/translate',\n      {\n        \"text\": text,\n        \"source_language\": src || this.src,\n        \"target_language\": target || this.target\n      }, {\n      headers: {\n        'Authorization': this.authorization\n      }\n    })\n  }\n\n  /**\n   * 根据本地语言映射表标记原始文本\n   * @param localLanguageMapInfo \n   * @param info \n   * @returns \n   */\n  encodeTranslateMapping(localLanguageMapInfo: Array<LanguageMapItemInfo>, info: TranslateConfigOption): TranslateConfigOption {\n\n    info = JSON.parse(JSON.stringify(info));\n    let text = info.text || '';\n\n    localLanguageMapInfo.forEach((map, index) => {\n      text = text.replace(map.src, '${' + index + '}')\n    })\n\n    info.text = text;\n    return info;\n  }\n\n\n  /**\n   * 根据本地语言映射表解析翻译结果\n   * @param key 映射标识\n   * @param responseText 翻译响应结果文本\n   * @returns \n   */\n  decodeTranslateMapping(localLanguageMapInfo: Array<LanguageMapItemInfo>, responseText: string): string {\n    localLanguageMapInfo.forEach((item, index) => {\n      responseText = responseText.replace('${' + index + '}', item.target)\n    })\n    return responseText;\n  }\n\n  /**\n   * 单个翻译\n   * @param options \n   */\n  singleTranslate(options: TranslateConfigOption): Promise<TranslateResponseOption> {\n    return new Promise((resolve, reject) => {\n\n      const targetLanguageMapInfo = this.getLocalTranslateLanguageMapInfoByKey(this.getLocalTranslateLanguageMapKeyByOption(options))\n\n      const _options = this.encodeTranslateMapping(targetLanguageMapInfo, options)\n\n      this.requestTranslate(_options.text || '', _options.src, _options.target).then((res) => {\n        resolve(res.code == 200 ? {\n          alternatives: (res.data || {}).alternatives || null,\n          data: this.decodeTranslateMapping(targetLanguageMapInfo, res.data?.data || ''),\n          id: options.id || '',\n          success: true\n        } : {\n          alternatives: null,\n          data: options.text || '',\n          id: options.id || '',\n          success: false\n        }\n        )\n\n      })\n    })\n  }\n\n  /**\n   * 批量翻译\n   * @param options \n   */\n  branchTranslate(options: Array<TranslateConfigOption>): Promise<Array<TranslateResponseOption>> {\n\n    return new Promise((resolve, reject) => {\n\n      // 按源语言和目标语言进行分组\n      const translateGroup: { [name: string]: Array<TranslateConfigOption> } = {};\n\n      options.forEach((option, index) => {\n\n        const key = this.getLocalTranslateLanguageMapKeyByOption(option)\n\n        const info: Array<TranslateConfigOption> = translateGroup[key] || [];\n        info.push(option)\n\n        translateGroup[key] = info;\n      })\n\n      //By language group Translate\n      Promise.all(Object.keys(translateGroup).map(key => {\n\n        const language = key.split('-');\n\n        const targetLanguageMapInfo = this.getLocalTranslateLanguageMapInfoByKey(key)\n\n        const encodeTranslateInfo = translateGroup[key].map(item => this.encodeTranslateMapping(targetLanguageMapInfo, item))\n\n        let translateSrcText = JSON.stringify(encodeTranslateInfo.map(item => item.text));\n\n        this.requestTranslate(translateSrcText, language[0], language[1]).then((res) => {\n\n          if (res.code == 200) {\n\n            resolve(JSON.parse(res.data?.data || '[]').map((v: string, i: number) => {\n              const info = encodeTranslateInfo[i];\n              return {\n                alternatives: (res.data || {}).alternatives || null,\n                data: this.decodeTranslateMapping(targetLanguageMapInfo, v),\n                id: info.id,\n                success: true\n              }\n            }))\n          } else {\n            resolve(translateGroup[key].map(info => {\n              return {\n                alternatives: null,\n                data: info.text || '',\n                id: info.id,\n                success: false\n              }\n            })\n            )\n          }\n        })\n      }))\n    })\n\n  }\n\n\n  /**\n   * \n   * @param options Translation Configura Option\n   * @returns If options dont instance of array,or options length is one return `Pormise<TranslateResponseOption>`,\n   * otherwise return `Promise<Array<TranslateResponseOption>>` type\n   * \n   */\n  translate(options: TranslateConfigOption | Array<TranslateConfigOption>): Promise<TranslateResponseOption> | Promise<Array<TranslateResponseOption>> {\n    return !(options instanceof Array) ? this.singleTranslate(options) : options.length == 1 ? this.singleTranslate(options[0]) : this.branchTranslate(options)\n  }\n\n}\n\nexport default TranslateEngine","import { TranslateEngine, TranslateConfigDefaultOption, TranslationLanguage } from '../../lib/core/engine';\n\nclass TranslateVuePlugin {\n\n  private engine: TranslateEngine\n\n  constructor(options: TranslateConfigDefaultOption) {\n    this.engine = new TranslateEngine(options)\n  }\n\n  translateVUE2() {\n    return {\n      bind(el: HTMLElement, binding: any, vnode: any, prevVnode: any) {\n        console.log('----vue2-bind', el, binding, vnode, prevVnode);\n      },\n      inserted() {\n\n      },\n      update() {\n\n      },\n      componentUpdated(el: HTMLElement, binding: any, vnode: any, prevVnode: any) {\n        console.log('----vue2-componentUpdated', el, binding, vnode, prevVnode);\n      },\n      unbind() {\n\n      }\n    }\n  }\n\n  translateVUE3() {\n    return {\n      // 在绑定元素的 attribute 前\n      // 或事件监听器应用前调用\n      created(el: any, binding: any, vnode: any, prevVnode: any) {\n        // 下面会介绍各个参数的细节\n      },\n      // 在元素被插入到 DOM 前调用\n      beforeMount(el: any, binding: any, vnode: any, prevVnode: any) { },\n      // 在绑定元素的父组件\n      // 及他自己的所有子节点都挂载完成后调用\n      mounted(el: any, binding: any, vnode: any, prevVnode: any) { },\n      // 绑定元素的父组件更新前调用\n      beforeUpdate(el: any, binding: any, vnode: any, prevVnode: any) { },\n      // 在绑定元素的父组件\n      // 及他自己的所有子节点都更新后调用\n      updated(el: any, binding: any, vnode: any, prevVnode: any) { },\n      // 绑定元素的父组件卸载前调用\n      beforeUnmount(el: any, binding: any, vnode: any, prevVnode: any) { },\n      // 绑定元素的父组件卸载后调用\n      unmounted(el: any, binding: any, vnode: any, prevVnode: any) { }\n    }\n  }\n\n}\n\n\nexport default {\n  install(app: any, options: TranslateConfigDefaultOption) {\n\n    const plugin = new TranslateVuePlugin(options)\n\n    const version = Number(app.version.split('.')[0])\n    if (version < 3) {\n      app.directive('translate', plugin.translateVUE2())\n      app.prototype.$translate = plugin.translateVUE2\n    } else {\n      app.directive('translate', plugin.translateVUE3())\n      app.config.globalProperties.$translate = plugin.translateVUE3\n    }\n  }\n}","import { TranslateEngine,TranslationLanguage} from './engine';\n\nimport TranslateVuePlugin from '../../platform/vue/index'\n\nconst Translate = {\n  TranslateEngine,\n  TranslateVuePlugin,\n  TranslationLanguage\n}\n\nexport default Translate"],"names":["XHRAdapter","prototype","send","options","Promise","resolve","reject","HttpClientRequestMethod","NodeHttpAdapter","url","mesage","method","urlInfo","URL","_options","Object","assign","hostname","window","location","port","path","pathname","search","_h","http.request","res","_data","setEncoding","on","chunk","Buffer","includes","headers","indexOf","JSON","parse","toString","code","statusCode","message","statusMessage","data","e","POST","write","stringify","Number","isInteger","timeout","setTimeout","end","TranslationLanguage","HttpClientInstance","this","defaultOption","get","params","request","GET","post","XMLHttpRequest","HttpClient$1","HttpClient","create","TranslateEngine","host","Error","authorization","src","target","ZH","EN","languageMap","http","getLocalTranslateLanguageMapKeyByOption","concat","getLocalTranslateLanguageMapInfoByKey","key","sort","v1","v2","width1","undefined","weight","requestTranslate","text","source_language","target_language","Authorization","encodeTranslateMapping","localLanguageMapInfo","info","forEach","map","index","replace","decodeTranslateMapping","responseText","item","singleTranslate","_this","targetLanguageMapInfo","then","alternatives","_a","id","success","branchTranslate","translateGroup","option","push","all","keys","language","split","encodeTranslateInfo","translateSrcText","v","i","translate","Array","length","TranslateVuePlugin","engine","translateVUE2","bind","el","binding","vnode","prevVnode","console","log","inserted","update","componentUpdated","unbind","translateVUE3","created","beforeMount","mounted","beforeUpdate","updated","beforeUnmount","unmounted","install","app","plugin","version","directive","$translate","config","globalProperties"],"mappings":"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"}